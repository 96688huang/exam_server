<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
     	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!-- 采用注释的方式配置bean -->
	<context:annotation-config />
	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com.tt.exam">
		<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" 
			/> -->
	</context:component-scan>

	<!--proxy-target-class="true"强制使用cglib代理 如果为false则spring会自动选择 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 数据库配置文件位置 -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- 配置dbcp数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${db.dataSource.url}" />
		<property name="username" value="${db.dataSource.username}" />
		<property name="password" value="${db.dataSource.password}" />
		
		<!-- 连接池连接数初始大小-->
		<property name="initialSize" value="${db.dataSource.initialSize}" />
		<!-- 连接池连接数最小值-->
		<property name="minIdle" value="${db.dataSource.minIdle}" />
		<!-- 连接池连接数最大值-->
		<property name="maxActive" value="${db.dataSource.maxActive}" />
		
		<!-- 获取连接等待超时的时间(单位：ms) -->
		<property name="maxWait" value="${db.dataSource.maxWait}" />
		<!-- 有两个含义： 1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的空闲时间判断依据。 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="${db.dataSource.timeBetweenEvictionRunsMillis}" />
		<!-- 一个连接在连接池中最小生存的时间(单位： ms) -->
		<property name="minEvictableIdleTimeMillis" value="${db.dataSource.minEvictableIdleTimeMillis}" />
		
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果为null，则testOnBorrow、testOnReturn、testWhileIdle都无效。 -->
		<property name="validationQuery" value="${db.dataSource.validationQuery}" />
		<!-- 连接空闲时，是否检测。 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis， 执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="${db.dataSource.testWhileIdle}" />
		<!-- 申请连接时，是否执行validationQuery检测连接是否有效，打开这个配置会降低性能。 -->
		<property name="testOnBorrow" value="${db.dataSource.testOnBorrow}" />
		<!-- 归还连接时，是否执行validationQuery检测连接是否有效，打开这个配置会降低性能。 -->
		<property name="testOnReturn" value="${db.dataSource.testOnReturn}" />
		
		<!-- 是否打开PSCache。如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false -->
		<property name="poolPreparedStatements" value="${db.dataSource.poolPreparedStatements}" />
		<!-- 每个连接上PSCache的大小 -->
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${db.dataSource.maxPoolPreparedStatementPerConnectionSize}" />
			
		<!-- 属性类型是字符串，通过别名的方式配置扩展插件， 常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
		<property name="filters" value="${db.dataSource.filters}" />
		
		<!-- 连接池属性配置：设置慢查询的时间 -->
		<property name="connectionProperties" value="${db.dataSource.connectionProperties}" />
	</bean>

	<!-- 配置mybitasSqlSessionFactoryBean -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource" /> <property name="configLocation" 
		value="classpath:mybatis.xml"></property> </bean> -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource" /> <property name="mapperLocations" 
		value="classpath*:com/tt/exam/dao/mapper/*Mapper.xml" /> </bean> -->

	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property 
		name="basePackage" value="com.tt.exam" /> <property name="annotationClass" 
		value="org.springframework.stereotype.Repository" /> </bean> -->

	<!-- 配置SqlSessionTemplate -->
	<!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> 
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" /> </bean> -->


	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 开启这个配置，spring才能识别@Scheduled注解 -->
	<!-- <task:annotation-driven scheduler="qbScheduler" mode="proxy" /> -->
	<!-- <task:scheduler id="qbScheduler" pool-size="10" /> -->

	<!-- 通用缓存配置文件加载 -->
	<!-- <bean name="cacheEntryFactory" class="cn.hehe9.common.cache.CacheEntryFactory" 
		init-method="init"> <property name="file" value="classpath:/cache/cache-config.xml"/> 
		</bean> -->

</beans>
